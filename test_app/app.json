[{"name":"app.R","content":"library(shiny)\nlibrary(ggplot2)\n\nui <- fluidPage(\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"r0\", \"R0\", min = 0, max = 10, value = 4, step = 0.1),\n      sliderInput(\"i0\", \"Initial infected\", min = 0, max = 20, value = 20, step = 1),\n    ),\n    mainPanel(\n      plotOutput(\"sirPlot\"),\n      textOutput(\"ssq\")\n    )\n  )\n)\n\nserver <- function(input, output) {\n\nlibrary(tibble)\n\n  uncontrolled_period <- tribble(\n    ~Date,        ~Cases, ~Cumulative_cases,\n    \"2020-03-07\",     2,   50,\n    \"2020-03-08\",     0,   50,\n    \"2020-03-09\",     0,   50,\n    \"2020-03-10\",     3,   53,\n    \"2020-03-11\",     6,   59,\n    \"2020-03-12\",    11,   70,\n    \"2020-03-13\",     5,   75,\n    \"2020-03-14\",     7,   82,\n    \"2020-03-15\",    32,  114,\n    \"2020-03-16\",    33,  147,\n    \"2020-03-17\",    30,  177,\n    \"2020-03-18\",    35,  212,\n    \"2020-03-19\",    60,  272,\n    \"2020-03-20\",    50,  322,\n    \"2020-03-21\",    89,  411,\n    \"2020-03-22\",   188,  599,\n    \"2020-03-23\",   122,  721,\n    \"2020-03-24\",   106,  827,\n    \"2020-03-25\",   107,  934,\n    \"2020-03-26\",   111, 1045\n  )\n  uncontrolled_period$Date <- as.Date(uncontrolled_period$Date)\n\n  incidence_frame <- reactive({\n    N <- 6.6e7\n    gamma <- 1/6\n    beta <- input$r0 * gamma\n    omega <- 1/5\n    I0 <- input$i0\n    S0 <- N - I0\n    R0 <- 0\n    days <- nrow(uncontrolled_period)\n    dt <- 0.1\n\n    n <- ceiling(days / dt)\n    time <- seq(0, by = dt, length.out = n)\n\n    S <- numeric(n)\n    E <- numeric(n)\n    I <- numeric(n)\n    R <- numeric(n)\n\n    S[1] <- S0\n    E[1] <- 0\n    I[1] <- I0\n    R[1] <- R0\n\n    for (t in 2:n) {\n      dS <- -beta * S[t-1] * I[t-1] / N\n      dE <- beta * S[t-1] * I[t-1] / N - omega * E[t-1]\n      dI <- omega * E[t-1] - gamma * I[t-1]\n      dR <- gamma * I[t-1]\n\n      S[t] <- S[t-1] + dt * dS\n      E[t] <- E[t-1] + dt * dE\n      I[t] <- I[t-1] + dt * dI\n      R[t] <- R[t-1] + dt * dR\n    }\n\n    incidence <- E * omega\n\n    incidence_frame <- data.frame(time = uncontrolled_period$Date[1] + time, incidence = incidence, t = time)\n\n    incidence_frame\n  })\n\n  incidence_frame_whole <- reactive({\n    incidence_frame_whole <- incidence_frame()\n    indexes <- which(incidence_frame_whole$t == floor(incidence_frame_whole$t))\n    incidence_frame_whole <- incidence_frame_whole[indexes,]\n    incidence_frame_whole$actual <- uncontrolled_period$Cases\n    incidence_frame_whole$difference <- incidence_frame_whole$actual - incidence_frame_whole$incidence\n\n    incidence_frame_whole\n  })\n\n  ssq <- reactive({\n    sum(incidence_frame_whole()$difference ^ 2)\n  })\n  \n  output$sirPlot <- renderPlot({\n    \n    # matplot(time, cbind(S, I, E, R),\n    #         type = \"l\", lty = 1, col = c(\"blue\", \"red\", \"green\"),\n    #         xlab = \"Time (days)\", ylab = \"Proportion\",\n    #         main = \"SIR Model (Euler's Method)\")\n    # legend(\"right\", legend = c(\"Susceptible\", \"Infected\", \"Recovered\"),\n    #        col = c(\"blue\", \"red\", \"green\", \"orange\"), lty = 1)\n\n    ggplot(incidence_frame(), aes(x=time, y=incidence)) +\n    geom_col(aes(x=Date, y=Cases), data = uncontrolled_period, fill = \"red\") +\n    geom_line() +\n    geom_point(data = incidence_frame_whole(), aes(x=time, y=actual)) +\n    geom_point(data = incidence_frame_whole()) +\n    geom_segment(aes(x = time, xend = time, y = actual, yend = incidence), data = incidence_frame_whole()) +\n    labs(x = \"Date\", y = \"Incidence\")\n  })\n\n  output$ssq <- renderText({\n    paste0(\"Sum of Squared Error (SSQ): \", prettyNum(round(ssq(), 2), big.mark=\",\"))\n  })\n}\n\nshinyApp(ui, server)","type":"text"},{"name":"DESCRIPTION","content":"Package: sirleastsquares\nTitle: Least squares demo of SIR COVID-19 App\nVersion: 0.0.1\nDescription: List the package dependencies here for the GitHub action to automatically\n  include the packages on the build. This is required for r-shinylive version >= 0.3.0.\nImports: \n    shiny,\n    shinythemes,\n    ggplot2\nEncoding: UTF-8","type":"text"}]
